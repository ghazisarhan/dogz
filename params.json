{
  "name": "Dogz",
  "tagline": "Your network problems directly into your hand",
  "body": "![Dogz](https://raw.githubusercontent.com/ricardomaraschini/dogz/master/js/client/resource/icon.png)\r\n\r\nDogz is a Mobile Application that allow users to see and to receive, in real time, problems or outages happening on a Network. It is composed by three separated entities, a _broker_, a _middleware_ and the _client_ application.\r\n\r\nDogz supports the following environments as backend for event and alerts generation:\r\n\r\n* Nagios\r\n* Naemon\r\n\r\nSupport for Zabbix and other Network Monitoring tools are also planned for near future and I hope to make it available as soon as possible\r\n\r\n# Features\r\n* Runs on Android and should run also on iOS and Windows(_I have no phone to test it out_)\r\n* Uses websockets, so, no delay when the application is open\r\n* Sends events through push notifications if application is closed\r\n* Performance graphs for all entities being monitored\r\n* Availability graph is also present\r\n* Filter events with one touch\r\n* Status view on a specific dashboard per host being monitored\r\n* Graph to show the overall health of the network\r\n\r\n# Structure\r\n\r\nIn order to avoid latency, _broker_ works using [pub/sub zmq technology](http://learning-0mq-with-pyzmq.readthedocs.org/en/latest/pyzmq/patterns/pubsub.html), the messages are consumed by the middleware and then pushed to client app on the exact moment they happened, without further delay. \r\n\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/structure.png\" >\r\n\r\nThe broker(useful for Nagios and Naemon) is written in *C*, middleware in *Node.js* and the client is written using Apache Cordova framework.\r\n\r\n# Installing\r\n\r\nI need someone to document this further, unfortunately. I will try to make my best but I assume you have a good understanding of Nagios/Naemon, Docker Containers and Android SDK.\r\n\r\nAfter doing a checkout of this repository you gonna find two important directories:\r\n\r\n* broker/\r\n* js/\r\n\r\nInside the js directory we have two another directories, one for the client app and another for the Middleware:\r\n\r\n* js/client\r\n* js/middleware\r\n\r\nIn a nutshell what we have to do is:\r\n\r\n1 Compile and install broker into Nagios/Naemon\r\n2 Enable Google Cloud Messaging for Push notifications\r\n3 Adjust some source code to contain the api key and sender id of your Google Cloud Messaging \r\n4 Run the Docker Container with the Middleware and make it connect to Nagios/Naemon broker providing the needed Google Cloud Messaging info\r\n5 Prepare and install the .apk for Android(_again, my only phone is an Android_)\r\n\r\n\r\n## Broker\r\n\r\nEnter the _broker_ directory and type _make_(_make nagios_ if you want to compile for Nagios), you gonna need _zmq-devel_ and _jansson-devel_ packages installed on your server, otherwise it will not compile. \r\n\r\nOnce it is compiled you may copy it to your Nagios/Naemon host and add an entry on broker section of your main configuration file. That is straight forward and you may consult https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/configmain.html for further information about this configuration.\r\n\r\nAfter restarting your monitoring environment you may see an open port(6969). Please assure that the only host that has access to this port is the middleware host, all checks results are going to be available on this port. If you want to let it open, no problem, it is up to you. I don't implement any security measurements to lock who is connecting into the port, but in the future this is something I certainly have to do.\r\n\r\n## Middleware\r\n\r\nFor the middleware you gonna need a Docker container. Enter the js/middleware directory and type:\r\n\r\n`# docker build -t cockpit/middleware .` \r\n\r\nThis may generate a Docker image named _cockpit/middleware_, put it to run on the following manner:\r\n\r\n`# docker run -e \"server=tcp://192.168.10.4:6969\" -p 49161:80 -d cockpit/middleware`\r\n\r\n_server_ must point to Nagios/Naemon ip address and the port 49161 may be changed to another as it is the port where mobile devices are going to connect. Make sure that the port is available to connect. Once you put the container online you may see the port 49161 open to the world, you are almost there, now we just have to create the .apk and install it on phone.\r\n\r\n## Client\r\n\r\nYou need Android SDK and Cordova installed, enter on the directory called _js/client/_ and type \r\n\r\n`# cordova platform add android`\r\n`# cordova build`\r\n\r\nThis is going to generate an apk file that you may install on your phone.\r\n\r\n# Screenshots\r\n\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/1.jpg\" width=\"340\">\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/2.jpg\" width=\"340\">\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/3.jpg\" width=\"340\">\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/4.jpg\" width=\"340\">\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/5.jpg\" width=\"340\">\r\n<img src=\"https://raw.githubusercontent.com/ricardomaraschini/dogz/master/art/7.jpg\" width=\"340\">",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
